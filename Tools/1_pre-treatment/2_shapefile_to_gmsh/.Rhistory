}
}
#========================================================================#
# CURVE LOOP + meshing surface
#========================================================================#
cat(paste0("\nCurve Loop(1) = {1:",nbpoint_majeur-1, "};"),
file = file.path("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/",name_output),
append = TRUE)
cat("\nPlane Surface(1) = {1};",
file = file.path("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/",name_output),
append = TRUE)
# ! add lit_mineur specification
for(i in 1:(nbpoint_mineur-1)){
cat(paste0("\nLine{",nbpoint_majeur+i, "} In Surface{1};"),
file = file.path("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/",name_output),
append = TRUE)
}
source("~/Documents/distant/dassflow2d-wrap/Tools/1_pre-treatment/2_shapefile_to_gmsh/gen_gmsh.R")
tmp = readLines("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/aude_v1.geo")
new_file = "/home/livillenave/Documents/distant/SD-FLOOD/real_case-AUDE/DATA/DASSFLOW/V2/hydraulic/tmp/mesh_v1.geo"
all_info_node = tmp[ grep("Nodes",tmp)[1]+1]
nb_node = as.numeric(strsplit(all_info_node, " ")[[1]][2])
start_node = grep("Nodes",tmp)[1]+2
end_node = grep("Nodes",tmp)[2]-1
id_cells = grep("Elements",tmp)
start_c = id_cells[1]+2
end_c = id_cells[2]-1
nb_cell =  end_c -start_c
cat( "# Generated mesh with R script gen_geo.R ||| number of nodes |   number of cells | mesh scale == 0 always",
file = new_file,
append = FALSE)
cat( paste0("\n",nb_node," ",nb_cell , "  0 \n"),
file = new_file,
append = TRUE)
cat( "#Nodes||| id node, x coord, y coord, bathy (x,y) \n",
file = new_file,
append = TRUE)
all_nodes_data = strsplit(tmp[start_node:end_node], " ")
len <- sapply(all_nodes_data, function(x){return(length(x))} )
lines_nodedata= which(len == 3)
id_node = 0
for( i in lines_nodedata){
id_node = id_node + 1
cat(
paste(c(format(id_node, scientific=F), all_nodes_data[[i]],"\n"), collapse = " "),
file = new_file,
append = TRUE  )
}
tmp = readLines("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/aude_v1.geo")
new_file = "/home/livillenave/Documents/distant/SD-FLOOD/real_case-AUDE/DATA/DASSFLOW/V2/hydraulic/tmp/mesh_v1.geo"
all_info_node = tmp[ grep("Nodes",tmp)[1]+1]
nb_node = as.numeric(strsplit(all_info_node, " ")[[1]][2])
start_node = grep("Nodes",tmp)[1]+2
end_node = grep("Nodes",tmp)[2]-1
id_cells = grep("Elements",tmp)
start_c = id_cells[1]+2
end_c = id_cells[2]-1
nb_cell =  end_c -start_c
cat( "# Generated mesh with R script gen_geo.R ||| number of nodes |   number of cells | mesh scale == 0 always",
file = new_file,
append = FALSE)
cat( paste0("\n",nb_node," ",nb_cell , "  0 \n"),
file = new_file,
append = TRUE)
cat( "#Nodes||| id node, x coord, y coord, bathy (x,y) \n",
file = new_file,
append = TRUE)
all_nodes_data = strsplit(tmp[start_node:end_node], " ")
len <- sapply(all_nodes_data, function(x){return(length(x))} )
lines_nodedata= which(len == 3)
id_node = 0
for( i in lines_nodedata){
id_node = id_node + 1
cat(
paste(c(format(id_node, scientific=F), all_nodes_data[[i]],"\n"), collapse = " "),
file = new_file,
append = TRUE  )
}
tmp = readLines("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/aude_v1.geo")
new_file = "/home/livillenave/Documents/distant/SD-FLOOD/real_case-AUDE/DATA/DASSFLOW/V2/hydraulic/tmp/mesh_v1.geo"
all_info_node = tmp[ grep("Nodes",tmp)[1]+1]
nb_node = as.numeric(strsplit(all_info_node, " ")[[1]][2])
start_node = grep("Nodes",tmp)[1]+2
end_node = grep("Nodes",tmp)[2]-1
start_node
end_node
nb_node
tmp
tmp = readLines("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/aude_v1.msh")
new_file = "/home/livillenave/Documents/distant/SD-FLOOD/real_case-AUDE/DATA/DASSFLOW/V2/hydraulic/tmp/mesh_v1.geo"
all_info_node = tmp[ grep("Nodes",tmp)[1]+1]
nb_node = as.numeric(strsplit(all_info_node, " ")[[1]][2])
start_node = grep("Nodes",tmp)[1]+2
end_node = grep("Nodes",tmp)[2]-1
id_cells = grep("Elements",tmp)
start_c = id_cells[1]+2
end_c = id_cells[2]-1
nb_cell =  end_c -start_c
id_cells
start_c
start_c
end_c
nb_cell
cat( "# Generated mesh with R script gen_geo.R ||| number of nodes |   number of cells | mesh scale == 0 always",
file = new_file,
append = FALSE)
cat( paste0("\n",nb_node," ",nb_cell , "  0 \n"),
file = new_file,
append = TRUE)
cat( "#Nodes||| id node, x coord, y coord, bathy (x,y) \n",
file = new_file,
append = TRUE)
all_nodes_data = strsplit(tmp[start_node:end_node], " ")
len <- sapply(all_nodes_data, function(x){return(length(x))} )
lines_nodedata= which(len == 3)
id_node = 0
for( i in lines_nodedata){
id_node = id_node + 1
cat(
paste(c(format(id_node, scientific=F), all_nodes_data[[i]],"\n"), collapse = " "),
file = new_file,
append = TRUE  )
}
cat( "\n # Cells|||  id of cell, id node 1, id node 2, id  node 3,  id node 4 , land_type, bathymetry \n",
file = new_file,
append = TRUE)
all_cell_data = strsplit(tmp[(start_c+1):end_c], " ")
for( i in 1:nb_cell){
to_paste = all_cell_data[[i]]
res = c(to_paste, to_paste[2], 1, 0,"\n")
cat( res,
file = new_file,
append = TRUE  )
}
all_cell_data = strsplit(tmp[(start_c+1):end_c], " ")
all_cell_data
start_c
end_c
strsplit(tmp[(start_c+1):end_c], " ")
start_c
new_file
nb_node
nb_cell
all_cell_data
all_cell_data[[1]]
all_cell_data[[2]]
all_cell_data[[3]]
all_cell_data[[4]]
all_cell_data[[5]]
all_cell_data[[6]]
library(raster)
library(rgdal)
name_output = "aude_v2.geo"
#shape_majeur = readOGR( "/home/livillenave/Images/test_again.shp")
shape_majeur = readOGR( "/home/livillenave/Documents/distant/SD-FLOOD/real_case-AUDE/DATA/DASSFLOW/V2/hydraulic/tmp/contour1.shp")
points_majeur =  shape_majeur@polygons[[1]]@Polygons[[1]]@coords #shape_majeur@lines[[1]]@Lines[[1]]@coords
nbpoint_majeur = nrow(points_majeur)
plot(shape_majeur)
#shape_mineur = readOGR("/home/livillenave/lit_mineur_crop.shp")
shape_mineur = readOGR("/home/livillenave/Documents/distant/SD-FLOOD/real_case-AUDE/DATA/DASSFLOW/V2/hydraulic/tmp/contour2.shp")
points_mineur = shape_mineur@polygons[[1]]@Polygons[[1]]@coords # shape_mineur@lines[[1]]@Lines[[1]]@coords
nbpoint_mineur = nrow(points_mineur)
plot(shape_mineur, add = TRUE, col = "green")
cat("lc_majeur=200;",
file = file.path("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/",name_output) ,
append = FALSE)
cat("\nlc_mineur=100;",
file = file.path("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/",name_output) ,
append = TRUE)
#========================================================================#
# GENERATE points
#========================================================================#
# ------------------ LIT MAJEUR --------------- #
for(i in 1:nbpoint_majeur){
cat(paste0("\nPoint(",i, ") = {", points_majeur[i,1], ",", points_majeur[i,2], ", 0 ,", "lc_majeur};"),
file = file.path("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/", name_output),
append = TRUE)
}
# ------------------ LIT MINEUR --------------- #
for(i in 1:nbpoint_mineur){
cat(paste0("\nPoint(",i+nbpoint_majeur, ") = {", points_mineur[i,1], ",", points_mineur[i,2], ", 0 ,", "lc_mineur};"),
file = file.path("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64",name_output),
append = TRUE)
}
#========================================================================#
# GENERATE lines
#========================================================================#
# ------------------ LIT MAJEUR --------------- #
for(i in 1:(nbpoint_majeur-1)){
if(i !=nbpoint_majeur-1){
cat(paste0("\nLine(",i, ") = {", i, ",", i+1, "};"),
file = file.path("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/",name_output),
append = TRUE)
}else{
cat(paste0("\nLine(",i, ") = {", i, ",", 1, "};"),
file = file.path("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/",name_output),
append = TRUE)
}
}
# ------------------ LIT MINEUR --------------- #
for(i in 1:(nbpoint_mineur-1)){
if(i !=nbpoint_mineur-1){
cat(paste0("\nLine(",nbpoint_majeur+i, ") = {", nbpoint_majeur+i, ",", nbpoint_majeur+i+1, "};"),
file = file.path("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/",name_output),
append = TRUE)
}else{
cat(paste0("\nLine(",nbpoint_majeur+i, ") = {",nbpoint_majeur+ i, ",",nbpoint_majeur+ 1, "};"),
file = file.path("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/",name_output),
append = TRUE)
}
}
all_cell_data
lapply(all_cell_data, function(x){
if(length(x)>1) return(x)
})
lapply(all_cell_data, function(x){
if(length(x)>2) return(x)
})
to_paste
all_cell_data
all_cell_data = strsplit(tmp[(start_c+1):end_c], " ")
lapply(all_cell_data, function(x){
if(length(x)>2) return(x)
})
all_cell_data
len(all_cell_data)
length(all_cell_data)
all_cell_data[[1]]
to_paste
i=0
to_paste = all_cell_data[[i]]
i
to_paste
res = c(to_paste, to_paste[2], 1, 0,"\n")
res
source("~/Documents/distant/dassflow2d-wrap/Tools/1_pre-treatment/3_gmsh_to_Dassflow/gen_geo.R")
lapply(all_cell_data, function(x){
if(length(x)>2) return(x)
})
a = lapply(all_cell_data, function(x){
if(length(x)>2) return(x)
})
a
b = which(is.null(a))
b
a
a=a[-which(sapply(a, is.null))]
a
a
all_nodes_data
cat( "# Cells|||  id of cell, id node 1, id node 2, id  node 3,  id node 4 , land_type, bathymetry \n",
file = new_file,
append = TRUE)
all_cell_data = strsplit(tmp[(start_c+1):end_c], " ")
all_cell_data
a = lapply(all_cell_data, function(x){
if(length(x)>3) return(x)
})
a=a[-which(sapply(a, is.null))]
a
source("~/Documents/distant/dassflow2d-wrap/Tools/1_pre-treatment/3_gmsh_to_Dassflow/gen_geo.R")
tmp = readLines("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/aude_v1.msh")
new_file = "/home/livillenave/Documents/distant/SD-FLOOD/real_case-AUDE/DATA/DASSFLOW/V2/hydraulic/tmp/mesh_v3.geo"
all_info_node = tmp[ grep("Nodes",tmp)[1]+1]
nb_node = as.numeric(strsplit(all_info_node, " ")[[1]][2])
start_node = grep("Nodes",tmp)[1]+2
end_node = grep("Nodes",tmp)[2]-1
id_cells = grep("Elements",tmp)
start_c = id_cells[1]+2
end_c = id_cells[2]-1
nb_cell =  end_c -start_c
cat( "# Generated mesh with R script gen_geo.R ||| number of nodes |   number of cells | mesh scale == 0 always",
file = new_file,
append = FALSE)
cat( paste0("\n",nb_node," ",nb_cell , "  0 \n"),
file = new_file,
append = TRUE)
cat( "#Nodes||| id node, x coord, y coord, bathy (x,y) \n",
file = new_file,
append = TRUE)
all_nodes_data = strsplit(tmp[start_node:end_node], " ")
len <- sapply(all_nodes_data, function(x){return(length(x))} )
lines_nodedata= which(len == 3)
id_node = 0
for( i in lines_nodedata){
id_node = id_node + 1
cat(
paste(c(format(id_node, scientific=F), all_nodes_data[[i]],"\n"), collapse = " "),
file = new_file,
append = TRUE  )
}
id_node
cat( "# Cells|||  id of cell, id node 1, id node 2, id  node 3,  id node 4 , land_type, bathymetry \n",
file = new_file,
append = TRUE)
all_cell_data = strsplit(tmp[(start_c+1):end_c], " ")
all_cell_data
a = lapply(all_cell_data, function(x){
if(length(x)>3) return(x)
})
a=a[-which(sapply(a, is.null))]
a
source("~/Documents/distant/dassflow2d-wrap/Tools/1_pre-treatment/2_shapefile_to_gmsh/gen_gmsh.R")
all_cell_data
all_cell_data = strsplit(tmp[(start_c+1):end_c], " ")
all_cell_data
a = lapply(all_cell_data, function(x){
if(length(x)>3) return(x)
})
a
a=a[-which(sapply(a, is.null))]
a
a = lapply(all_cell_data, function(x){
if(a[0]==1, a[2]=="1", a[3]="1") return(x)
})
a = lapply(all_cell_data, function(x){
if(a[0]==1 && a[2]=="1"&& a[3]="1"){return(x)}
})
for( i in 1:nb_cell){
to_paste = all_cell_data[[i]]
res = c(to_paste, to_paste[2], 1, 0,"\n")
cat( res,
file = new_file,
append = TRUE  )
}
cat( "# Boundaries \n",
a = lapply(all_cell_data, function(x){
if(a[0]==1 && a[2]=="1"&& a[3]="1"){return(x)}
})
a = lapply(all_cell_data, function(x){
if(a[0]==1 && a[2]=="1"&& a[3]="1"){return(x)}
})
a =
a
a = lapply(all_cell_data, function(x){
if(a[0]==1 && a[2]=="1"&& a[3]="1"){return(x)}
})
a
a = lapply(all_cell_data, function(x){
if(length(x)>3) return(x)
})
a=a[-which(sapply(a, is.null))]
a = lapply(all_cell_data, function(x){
if(a[0]==1 && a[2]=="1"&& a[3]="1"){return(x)}
})
if(a[0]==1 && a[2]=="1"&& a[3]="1")
a = lapply(all_cell_data, function(x){
if(a[0]==1 & a[2]=="1" & a[3]="1"){return(x)}
})
a = lapply(all_cell_data, function(x){
if(a[0]=="1" & a[2]=="1" & a[3]=="1"){return(x)}
})
a
a = lapply(all_cell_data, function(x){
if(x[0]=="1" & x[2]=="1" & x[3]=="1"){return(x)}
})
a = lapply(a, function(x){
if(x[0]=="1" & x[2]=="1" & x[3]=="1"){return(x)}
})
x=za[[0]]
x=a[[0]]
x
a
a[[1]]
x = a[[1]]
x
x[0]=="1"
x[2]=="1"
a = lapply(a, function(x){
if(x[1]=="1" & x[3]=="1" & x[4]=="1"){return(x)}
})
a
a = lapply(a, function(x){
if(x[1]=="1" & x[3]=="1" & x[4]=="1"){return(NULL)}else{return(x)}
})
a=a[-which(sapply(a, is.null))]
a = lapply(a, function(x){
if(x[1]=="1" & x[3]=="1" & x[4]=="1"){return(NULL)}else{return(x)}
})
a
a=a[-which(sapply(a, is.null))]
a
a
x[1]=="1" & x[3]=="1" & x[4]=="1"
a = lapply(a, function(x){
if(x[1]=="1" & x[3]=="1" & x[4]=="1"){
return(NULL)
}else{
return(x)
}
})
a
tmp = readLines("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/aude_v1.msh")
new_file = "/home/livillenave/Documents/distant/SD-FLOOD/real_case-AUDE/DATA/DASSFLOW/V2/hydraulic/tmp/mesh_v3.geo"
all_info_node = tmp[ grep("Nodes",tmp)[1]+1]
nb_node = as.numeric(strsplit(all_info_node, " ")[[1]][2])
start_node = grep("Nodes",tmp)[1]+2
end_node = grep("Nodes",tmp)[2]-1
id_cells = grep("Elements",tmp)
start_c = id_cells[1]+2
end_c = id_cells[2]-1
nb_cell =  end_c -start_c
cat( "# Generated mesh with R script gen_geo.R ||| number of nodes |   number of cells | mesh scale == 0 always",
file = new_file,
append = FALSE)
cat( paste0("\n",nb_node," ",nb_cell , "  0 \n"),
file = new_file,
append = TRUE)
cat( "#Nodes||| id node, x coord, y coord, bathy (x,y) \n",
file = new_file,
append = TRUE)
all_nodes_data = strsplit(tmp[start_node:end_node], " ")
len <- sapply(all_nodes_data, function(x){return(length(x))} )
lines_nodedata= which(len == 3)
id_node = 0
for( i in lines_nodedata){
id_node = id_node + 1
cat(
paste(c(format(id_node, scientific=F), all_nodes_data[[i]],"\n"), collapse = " "),
file = new_file,
append = TRUE  )
}
cat( "# Cells|||  id of cell, id node 1, id node 2, id  node 3,  id node 4 , land_type, bathymetry \n",
file = new_file,
append = TRUE)
all_cell_data = strsplit(tmp[(start_c+1):end_c], " ")
a = lapply(all_cell_data, function(x){
if(length(x)>3) return(x)
})
a=a[-which(sapply(a, is.null))]
a = lapply(a, function(x){
if(x[1]=="1" & x[3]=="1" & x[4]=="1"){
return(NULL)
}else{
return(x)
}
})
a
a=a[-which(sapply(a, is.null))]
a
id_cells = grep("Elements",tmp)
id_cells
tmp[id_cell+1]
tmp[id_cells+1]
elements_metadata[2]
strsplit(elements_metadata)
elements_metadata
id_cells = grep("Elements",tmp)
elements_metadata =tmp[id_cells+1]
grep
elements_metadata
strsplit(elements_metadata)
elements_metadata
str(
unkown_elements = elements_metadata[1])
str() elements_metadata[1])
str( elements_metadata)
strsplit(elements_metadata[1])
elements_metadata[1]
unkown_elements = strsplit(elements_metadata[1]; " ")
strsplit(elements_metadata[1], " ")
elements_metadata[1]
id_cells = grep("Elements",tmp)
elements_metadata =tmp[id_cells+1]
elements_metadata = strsplit(elements_metadata[1], " ")[[1]]
elements_metadata
elements_metadata[1]
id_cells = grep("Elements",tmp)
elements_metadata =tmp[id_cells+1]
elements_metadata = strsplit(elements_metadata[1], " ")[[1]]
unkown_elements = as.integer(elements_metadata[1])
nb_cell = as.integer(elements_metadata[2])
nb_cell
unkown_elements
elements_metadata
nb_cell
unkown_elements
id_cells[1]+1+unkown_elements
id_cells[1]+1+unkown_elements
id_cells[2]
id_cells = grep("Elements",tmp)
elements_metadata =tmp[id_cells+1]
elements_metadata = strsplit(elements_metadata[1], " ")[[1]]
unkown_elements = as.integer(elements_metadata[1])
nb_cell = as.integer(elements_metadata[2])
start_c = id_cells[1]+1+unkown_elements
end_c = id_cells[2]-1
nb_cell_lines =  end_c -start_c
nb_cell_lines
end_c
start_c
id_cells
id_cells = grep("Elements",tmp)
elements_metadata =tmp[id_cells+1]
elements_metadata = strsplit(elements_metadata[1], " ")[[1]]
unkown_elements = as.integer(elements_metadata[1])
nb_cell = as.integer(elements_metadata[2])
start_c = id_cells[1]+1+unkown_elements
end_c = id_cells[2]-1
nb_cell_lines =  end_c -start_c
start_c
start_c
nb_cell_lines
end_c
tmp = readLines("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/aude_v1.msh")
name_output
nbpoint_majeur
nbpoint_majeur
cat(paste0("\nCurve Loop(1) = {1:",nbpoint_majeur-1, "};"),
file = file.path("/home/livillenave/Documents/software/gmsh-4.10.5-Linux64/",name_output),
append = TRUE)
nbpoint_majeur
